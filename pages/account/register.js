import Head from 'next/head';
import React, { useState } from 'react';
import Link from 'next/link';
import Image from 'next/image';
import { useForm } from 'react-hook-form';
import { MakeChips } from '@/components/components.utils';
import { useRouter } from 'next/router';

const Register = () => {
	const router = useRouter();
	const [typing, setTyping] = useState(false);
	const [eye, setEye] = useState(false);
	const [loading, setLoading] = useState(false);
	const [ready, setReady] = useState(false);
	const [failed, setFailed] = useState(false);
	const {
		register,
		getValues,
		formState: { errors },
		handleSubmit,
	} = useForm();
	const onSubmit = async (data) => {
		setLoading(true);

		const prepared = {
			name: String(data.fullName).toLowerCase(),
			email: data.email,
			password: MakeChips(data.password),
			agreedTerms: data.agreedTerms,
			isVerified: false,
		};

		const response = await fetch('/api/account/register', {
			method: 'POST',
			headers: {
				'Content-Type': 'application/json',
			},
			body: JSON.stringify(prepared),
		});

		const result = await response.json();

		if (response.status === 409) {
			setFailed(result.message);
		}

		console.log(result);

		!result.success && setFailed(result.message);
		result.success && setReady(true);
	};

	return (
		<>
			<Head>
				<title>Register | CoinBoat</title>
				<meta name='description' content='Generated by create next app' />
				<link rel='icon' href='/images/brand/favicon.ico' />
			</Head>
			<div className='flex justify-center items-center h-screen'>
				<div className='shadow-md xl:w-[30%] lg:w-[50%] md:w-[70%] w-full py-6 px-10 border rounded-lg'>
					{!ready ? (
						!failed ? (
							<>
								<h3 className='heading text-2xl mt-3 mb-6 flex items-center'>
									Register to Coinboat&nbsp;
									<Image
										src={`/images/account/emoji/emoji_${
											!typing ? '014' : '007'
										}.png`}
										alt="emoji's"
										width={35}
										height={35}
									/>
								</h3>
								<div className='mb-4'>
									<form onSubmit={handleSubmit(onSubmit)}>
										<div className='mb-6'>
											<label className='block mb-2 text-sm font-medium text-gray-900 dark:text-white'>
												Full name
											</label>
											<input
												type='text'
												className='bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg outline-none focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white  dark:focus:border-blue-500'
												placeholder='Your sweet name'
												{...register('fullName', {
													required: true,
													minLength: 3,
													pattern: /^[A-Za-z]+$/i,
													onChange: () => setTyping(true),
													onBlur: () => setTyping(false),
												})}
												aria-invalid={errors.fullName ? 'true' : 'false'}
											/>
											<p
												role='alert'
												className='text-danger mt-2 mx-1 -mb-2 text-sm'
											>
												{errors.fullName?.type === 'required' &&
													'Name is required'}
												{errors.fullName?.type === 'pattern' &&
													'Numbers and special characters not allowed'}
												{errors.fullName?.type === 'minLength' &&
													'Please enter at least 3 characters'}
											</p>
										</div>
										<div className='mb-6'>
											<label className='block mb-2 text-sm font-medium text-gray-900 dark:text-white'>
												Email address
											</label>
											<input
												type='email'
												className='bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg outline-none focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:border-blue-500'
												placeholder='Current email address'
												{...register('email', {
													required: true,
													pattern: /^[a-z0-9._%+-]+@[a-z0-9.-]+\.[a-z]{2,}$/i,
													onChange: () => setTyping(true),
													onBlur: () => setTyping(false),
												})}
												aria-invalid={errors.email ? 'true' : 'false'}
											/>
											<p
												role='alert'
												className='text-danger mt-2 mx-1 -mb-2 text-sm'
											>
												{errors.email?.type === 'required' &&
													'Email is required'}
												{errors.email?.type === 'pattern' &&
													'Please enter valid email'}
											</p>
										</div>
										<div className='mb-6'>
											<label className='block mb-2 text-sm font-medium text-gray-900 dark:text-white'>
												Password
											</label>
											<div className='relative'>
												<input
													type={`${!eye ? 'password' : 'text'}`}
													className='bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg outline-none focus:border-blue-500 block w-full py-2.5 pl-2.5 pr-10 tracking-wide'
													placeholder='Secure password'
													{...register('password', {
														required: true,
														minLength: 8,
														pattern:
															/^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*_=+-]).{8,24}$/i,
														onChange: () => setTyping(true),
														onBlur: () => setTyping(false),
													})}
													aria-invalid={errors.password ? 'true' : 'false'}
												/>
												<button
													type='button'
													className='absolute top-0 right-0 m-[3px] outline-none'
													onClick={() => setEye(!eye)}
												>
													<Image
														src={`/images/account/emoji/emoji_${
															!eye ? '004' : '015'
														}.png`}
														alt="emoji's"
														width={35}
														height={35}
													/>
												</button>
											</div>
											<p
												role='alert'
												className='text-danger mt-2 mx-1 -mb-2 text-sm'
											>
												{errors.password?.type === 'required' &&
													'Password is required'}
												{errors.password?.type === 'minLength' &&
													'Password must 8 characters length'}
												{errors.password?.type === 'pattern' &&
													'Must contain capital letter, number and symbol'}
											</p>
										</div>
										<div className='mb-6'>
											<label className='block mb-2 text-sm font-medium text-gray-900 dark:text-white'>
												Confirm password
											</label>
											<input
												type='password'
												className='bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg outline-none focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white  dark:focus:border-blue-500'
												placeholder='Re-enter password'
												{...register('confirmPassword', {
													required: true,
													minLength: 8,
													validate: (value) => {
														const { password } = getValues();
														return password === value || false;
													},
													onChange: () => setTyping(true),
													onBlur: () => setTyping(false),
												})}
												aria-invalid={errors.confirmPassword ? 'true' : 'false'}
											/>
											<p
												role='alert'
												className='text-danger mt-2 mx-1 -mb-2 text-sm'
											>
												{errors.confirmPassword?.type === 'required' &&
													'Password is required'}
												{errors.confirmPassword?.type === 'minLength' &&
													'Password must 8 characters length'}
												{errors.confirmPassword?.type === 'validate' &&
													'Confirm password does not match'}
											</p>
										</div>
										<div className='flex items-start mb-6'>
											<div className='flex items-center h-5'>
												<input
													id='remember'
													type='checkbox'
													value=''
													className='w-4 h-4 border border-gray-300 rounded bg-gray-50 focus:ring-3 focus:ring-blue-300 dark:bg-gray-700 dark:border-gray-600 dark:focus:ring-blue-600 dark:ring-offset-gray-800'
													{...register('agreedTerms', {
														required: true,
													})}
													aria-invalid={errors.agreedTerms ? 'true' : 'false'}
												/>
											</div>
											<label
												htmlFor='remember'
												className='ml-2 text-sm font-medium text-gray-900 dark:text-gray-300'
											>
												<p
													role='alert'
													className='text-danger mx-1 -mb-2 text-sm'
												>
													{errors.agreedTerms?.type === 'required' ? (
														'Agree and proceed registration'
													) : (
														<span className='text-black'>
															I agree with the
															<Link
																href='#'
																className='text-blue-600 hover:underline dark:text-blue-500 ml-1'
															>
																terms and conditions
															</Link>
															.
														</span>
													)}
												</p>
											</label>
										</div>
										{!loading ? (
											<button
												type='submit'
												className='text-white bg-primary hover:bg-blue-600 outline-none font-medium rounded-full w-full sm:w-auto px-6 py-2.5 text-center'
											>
												Ready to login
											</button>
										) : (
											<div className='bg-primary hover:bg-blue-600 rounded-full px-2 py-1 w-36'>
												<span className='loader'></span>
											</div>
										)}
									</form>
								</div>
							</>
						) : (
							<div className='flex flex-col items-center pb-8 pt-7'>
								<h3 className='flex items-center text-3xl heading text-danger'>
									<Image
										src='/images/account/emoji/emoji_003.png'
										alt="emoji's"
										width={35}
										height={35}
										className='mr-2'
									/>
									{failed}
								</h3>
								<p className='text-center px-5 py-2 text-lg text-slate-700'>
									May be you have an account or you entered wrong email. Please
									verify.
								</p>
								<div className='flex items-center'>
									<button
										className='border border-primary hover:bg-blue-600 hover:text-white py-2 px-6 rounded-full text-primary mt-4 mb-2 mx-1.5'
										onClick={() => router.reload()}
									>
										Retry
									</button>
									<Link
										href='/account/login'
										className='bg-primary border-primary hover:bg-blue-600 py-2 px-6 rounded-full text-white mt-4 mb-2 mx-1.5'
									>
										Login
									</Link>
								</div>
							</div>
						)
					) : (
						<div className='flex flex-col items-center py-8'>
							<h3 className='flex items-center text-3xl heading'>
								<Image
									src='/images/account/emoji/emoji_016.png'
									alt="emoji's"
									width={35}
									height={35}
									className='mr-2'
								/>
								Registered Successfully
							</h3>
							<ul className='mt-2'>
								<li className='text-lg'>
									<em className='bi bi-check2-all mr-2 text-success text-xl'></em>
									Account registration
								</li>
								<li className='text-lg'>
									<em className='bi bi-check2-all mr-2 text-gray-500 text-xl'></em>
									Account verification
								</li>
								<li className='text-lg'>
									<em className='bi bi-check2-all mr-2 text-gray-500 text-xl'></em>
									Complete Profile
								</li>
							</ul>
							<Link
								href='/account/login'
								className='bg-primary hover:bg-blue-600 py-2.5 px-6 rounded-full text-white mt-4 mb-2'
							>
								Verify Account
							</Link>
						</div>
					)}
				</div>
			</div>
		</>
	);
};

export default Register;
